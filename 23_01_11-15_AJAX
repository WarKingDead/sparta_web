<!--

   ###    ########  ####
  ## ##   ##     ##  ##
 ##   ##  ##     ##  ##
##     ## ########   ##
######### ##         ##
##     ## ##         ##
##     ## ##        ####



##     ## ######## ##     ## ##
##     ##    ##    ###   ### ##
##     ##    ##    #### #### ##
#########    ##    ## ### ## ##
##     ##    ##    ##     ## ##
##     ##    ##    ##     ## ##
##     ##    ##    ##     ## ########




AJAX를 이용하는 이유는

실시간 데이터 API를 가져와서 HTML에 적용하여
필요한 필드 내용만 정리해서 볼 수 있도록 하기 위함임.
        JSON이고 AJAX고 나발이고 그냥
        외부에서 url을 통해 데이터 가져와서 html 페이지로 보는 방법인 것임


= Point =
    AJAX를 HTMl에 붙이려면
    TEMP_HTML 코드를 넣어줘야만 된다.






           8 8888    d888888o.       ,o888888o.     b.             8
           8 8888  .`8888:' `88.  . 8888     `88.   888o.          8
           8 8888  8.`8888.   Y8 ,8 8888       `8b  Y88888o.       8
           8 8888  `8.`8888.     88 8888        `8b .`Y888888o.    8
           8 8888   `8.`8888.    88 8888         88 8o. `Y888888o. 8
           8 8888    `8.`8888.   88 8888         88 8`Y8o. `Y88888o8
88.        8 8888     `8.`8888.  88 8888        ,8P 8   `Y8o. `Y8888
`88.       8 888' 8b   `8.`8888. `8 8888       ,8P  8      `Y8o. `Y8
  `88o.    8 88'  `8b.  ;8.`8888  ` 8888     ,88'   8         `Y8o.`
    `Y888888 '     `Y8888P ,88P'     `8888888P'     8            `Yo




서버 → 클라이언트: "JSON"을 이해하기
서버요청 시 두가지 타입이 있는데
GET은 단순 조회
POST는 데이터를 가공할 떄 사용

       서울시 OpenAPI를 열어보면 ↓ 이 난리가 나있음.

          {"RealtimeCityAir":{"list_total_count":25,"RESULT":{"CODE":"INFO-000","MESSAGE":"정상 처리되었습니다"},"row":[{"MSRDT":"202301111800","MSRRGN_NM":"도심권","MSRSTE_NM":"중구","PM10":0.0,"PM25":0.0,"O3":0.0,"NO2":0.0,"CO":0.0,"SO2":0.0,"IDEX_NM":"","IDEX_MVL":0.0,"ARPLT_MAIN":""},{"MSRDT":"202301111800","MSRRGN_NM":"도심권","MSRSTE_NM":"종로구","PM10":65.0,"PM25":45.0,"O3":0.003,"NO2":0.068,"CO":0.8,"SO2":0.005,"IDEX_NM":"나쁨","IDEX_MVL":132.0,"ARPLT_MAIN":"PM-2.5"},{"MSRDT":"202301111800","MSRRGN_NM":"도심권","MSRSTE_NM":"용산구","PM10":78.0,"PM25":49.0,"O3":0.003,"NO2":0.068,"CO":0.9,"SO2":0.004,"IDEX_NM":"나쁨","IDEX_MVL":116.0,"ARPLT_MAIN":"PM-2.5"},{"MSRDT":"202301111800","MSRRGN_NM":"서북권","MSRSTE_NM":"은평구","PM10":83.0,"PM25":47.0,"O3":0.004,"NO2":0.059,"CO":1.1,"SO2":0.005,"IDEX_NM":"나쁨","IDEX_MVL":105.0,"ARPLT_MAIN":"PM-2.5"},{"MSRDT":"202301111800","MSRRGN_NM":"서북권","MSRSTE_NM":"서대문구","PM10":53.0,"PM25":35.0,"O3":0.004,"NO2":0.066,"CO":1.0,"SO2":0.007,"IDEX_NM":"나쁨","IDEX_MVL":116.0,"ARPLT_MAIN":"PM-2.5"},{"MSRDT":"202301111800","MSRRGN_NM":"서북권","MSRSTE_NM":"마포구","PM10":74.0,"PM25":62.0,"O3":0.003,"NO2":0.079,"CO":0.8,"SO2":0.007,"IDEX_NM":"나쁨","IDEX_MVL":147.0,"ARPLT_MAIN":"PM-2.5"},{"MSRDT":"202301111800","MSRRGN_NM":"동북권","MSRSTE_NM":"광진구","PM10":74.0,"PM25":50.0,"O3":0.003,"NO2":0.055,"CO":0.7,"SO2":0.004,"IDEX_NM":"나쁨","IDEX_MVL":120.0,"ARPLT_MAIN":"PM-2.5"},...
          이따위로 뜨는 데이터를
          크롬의 확장 프로그램인 Jsonview 로 정렬해서 볼 것이다.
          크롬 익스텐션 JSONView를 설치해볼까요? 그럼 좀 더 예쁘게 JSON을 볼 수 있습니다.

          ↓ 이렇게 정리됨

        이것이 바로 Json형식!
        (단순하게는 딕셔너리와 리스트의 혼합버전으로 보면 된다)


         RealtimeCityAir라는 키 값에
         딕셔너리 형 value가 들어가있고,
         그 안에
                row라는 키 값에는 리스트형 value가 들어가있습니다.
               {
               RealtimeCityAir: {
               row: [
               {
               MSRDT: "202301111800",
               MSRRGN_NM: "도심권",
               MSRSTE_NM: "중구",
                    ...
               MSRDT: "202301111800",
               MSRRGN_NM: "도심권",
               MSRSTE_NM: "종로구",
               IDEX_NM: "나쁨",
               IDEX_MVL: 132,
                 ARPLT_MAIN: "PM-2.5"

      JSON은, Key:Value로 이루어져 있습니다. 자료형 Dictionary와 아주- 유사하죠

클라이언트→서버: GET 요청 이해하기

        API는 은행 창구와 같은 것!
        같은 예금 창구에서도 개인 고객이냐 기업 고객이냐에 따라
        가져와야 하는 것 / 처리해주는 것이 다른 것처럼,

클라이언트가 요청 할 때에도, "타입"이라는 것이 존재합니다.

GET은 단순 조회
POST는 데이터를 가공할 떄 사용

			* GET        →   통상적으로! 데이터 조회(Read)를 요청할 때
									   예) 영화 목록 조회

			* POST     →     통상적으로! 데이터 생성(Create), 변경(Update), 삭제(Delete) 요청 할 때
									   예) 회원가입, 회원탈퇴, 비밀번호 수정

			이 중에서 오늘은 GET 방식에 대해 배워보겠습니다. (POST는 4주차에 배웁니다)






         .8.                               8 8888          .8.          `8.`8888.      ,8'
        .888.                              8 8888         .888.          `8.`8888.    ,8'
       :88888.                             8 8888        :88888.          `8.`8888.  ,8'
      . `88888.                            8 8888       . `88888.          `8.`8888.,8'
     .8. `88888.                           8 8888      .8. `88888.          `8.`88888'
    .8`8. `88888.                          8 8888     .8`8. `88888.         .88.`8888.
   .8' `8. `88888.              88.        8 8888    .8' `8. `88888.       .8'`8.`8888.
  .8'   `8. `88888.             `88.       8 888'   .8'   `8. `88888.     .8'  `8.`8888.
 .888888888. `88888.              `88o.    8 88'   .888888888. `88888.   .8'    `8.`8888.
.8'       `8. `88888.               `Y888888 '    .8'       `8. `88888. .8'      `8.`8888.




0. 단계
    AJAX 기본 형식
       <SCRIPT>

         $.ajax({
         type: "GET",
         url: "여기에URL을입력",
         data: {},
         success: function(response){
         console.log(response)
         }
         })

       </SCRIPT>
       GET빙식으로 이 url에 요청해서 response를 찍겠다는 뜻


     url: "http://spartacodingclub.shop/sparta_api/seoulair",
    에서 가져오도록 실행한
    콘솔창에서 보이는RealtimeCityAir의
    :row를 가져와 보겠다.
    ↓

        <SCRIPT>

        $.ajax({
        type: "GET",
        url: "http://spartacodingclub.shop/sparta_api/seoulair",
        data: {},
        success: function(response){
        console.log(response['RealtimeCityAir']['row'])
        }
        })
        </SCRIPT>

           이렇게 하면 아까는 콘솔창에서 클릭해서 들어가야 열리던
    [리스트 형식]내용이 곧바로 콘솔창에 뜬다.
         ▶ (25) [{…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…},

    리스트 타입의 데이터를 구이름. 미세먼지값 두 줄로 정리하겠쓰

		$.ajax({
		type: "GET",
		url: "http://spartacodingclub.shop/sparta_api/seoulair",
		data: {},
		success: function(response){
		let rows = response['RealtimeCityAir']['row']
		for (let i = 0; i < rows.length; i++){
		let gu_name = rows[i]['MSRSTE_NM']
		let gu_mise = rows[i]['IDEX_MVL']
		console.log(gu_name, gu_mise)
		}}})
		</SCRIPT>

    let gu_name = rows[i]['MSRSTE_NM']
    let gu_mise = rows[i]['IDEX_MVL']
    row의 gu_name과 gu_mise 항목만 표시하게 부르겠다는 의미

    	<script>
        $.ajax({
        type: "GET",
        url: "http://spartacodingclub.shop/sparta_api/seoulair",
        data: {},
        success: function(response){
        let rows = response['RealtimeCityAir']['row']
        for (let i = 0; i < rows.length; i++){
        let gu_name = rows[i]['MSRSTE_NM']
        let gu_mise = rows[i]['IDEX_MVL']
        console.log(gu_name, gu_mise)
        }}})
        </script>
		</head>

0-1.단계
이제 AJAX를 HTML에 적용해보자.

        서울시 OpenAPI(실시간 미세먼지 상태)를
        업데이트 버튼을 누를 때 마다 새로 가져오도록 만들것이다!
		RealtimeCityAir: {
		row: [
		{
		IDEX_MVL: 31,
		IDEX_NM: "좋음",
		MSRDT: "201912052100",
		MSRRGN_NM: "도심권",
		MSRSTE_NM: "중구",
		},

        이 내용을 불러오는 것

1. 단계
		function q1() {
		$.ajax({
		type: "GET",
		url: "http://spartacodingclub.shop/sparta_api/seoulair",
		data: {},
		success: function (response) {
		console.log(response)
		}})}
		</script>
		</head>
페이지를 실행하고 콘솔을 켜면
이런 애가 성공적으로 뜬다
↓
{RealtimeCityAir: {…}}


콘솔에서 얘의 row를 가져와서 태그에 넣을 것이다.
2 단계
		<script>
		function q1() {
		$.ajax({
		type: "GET",
		url: "http://spartacodingclub.shop/sparta_api/seoulair",
		data: {},
		success: function (response) {
console.log(response['RealtimeCityAir']['row'])
					   ↑
RealtimeCityAir의 row를 타고 들어간다는 뜻
		}})}
		</script>
		</head>

3.단계
		<script>
		function q1() {
		$.ajax({
		type: "GET",
		url: "http://spartacodingclub.shop/sparta_api/seoulair",
		data: {},
		success: function (response) {
		let rows = response['RealtimeCityAir']['row']
		for (let i= 0; i < rows.length; i++){
		let gu_name= rows[i] ['MSRTE_NM']
		let gu_mise = rows[i]['IDEX_MVL']
    	console.log(gu_name, gu_mise)
		}}})}
		</script>
이제 콘솔에서 클릭해야 뜨는 ROW 정보가 콘솔에 바로 뜬다.
이제 HTML페이지의 버튼을 누르면 페이지에 표시가 되도록
temp_html을 만들어서 연결해주자
		<script>
		function q1() {
		$.ajax({
		type: "GET",
		url: "http://spartacodingclub.shop/sparta_api/seoulair",
		data: {},
		success: function(response){
		let rows = response['RealtimeCityAir']['row']
		for (let i= 0; i < rows.length; i++){
		let gu_name= rows[i] ['MSRTE_NM']
		let gu_mise = rows[i]['IDEX_MVL']
	let temp_html = `<li>${gu_name} : ${gu_mise}</li>`
    작은 따옴표가 아니라 ↑` `백틱으로 감싸야한다.
            $('#names-q1').append(temp_html)
			}}})}
			</script>
4.단계
문제는 이게 업데이트를 누르면 불러온 데이터에 또 덧붙여서 양이 계속늘어난다.
먼저 부른 걸 지우고 덮어 씌우도록 해야겠다.
$('#names-q1').empty();
를 붙이자.
			<script>
				function q1() {
	$('#names-q1').empty();
		$.ajax({
		type: "GET",
		url: "http://spartacodingclub.shop/sparta_api/seoulair",
		data: {},
		success: function (response) {
		let rows = response["RealtimeCityAir"]["row"];
		for (let i = 0; i < rows.length; i++) {
		let gu_name = rows[i]['MSRSTE_NM'];
		let gu_mise = rows[i]['IDEX_MVL'];
		let temp_html = `<li>${gu_name} : ${gu_mise}</li>`
		$('#names-q1').append(temp_html);
		}}})}
		</script>
		</head>
5. 미세먼지 나쁨 시 빨간 색으로 표시하도록
style에 이름표를 만들어 주고

		.bad{
		color : red;
		}
    </style>
AJAX에도 일정 값이상 크면 bad가 적용되도록 함수를 걸자.
        <script>
        function q1() {
        $('#names-q1').empty();
        $.ajax({
        type: "GET",
        url: "http://spartacodingclub.shop/sparta_api/seoulair",
        data: {},
        success: function (response) {
        let rows = response["RealtimeCityAir"]["row"];
        for (let i = 0; i < rows.length; i++) {
        let gu_name = rows[i]['MSRSTE_NM'];
        let gu_mise = rows[i]['IDEX_MVL'];
        let temp_html = `<li>${gu_name} : ${gu_mise}</li>`
        if(gu_mise > 120) {
let temp_html = `<li class="bad">${gu_name} : ${gu_mise}</li>`
//							↑ bad 이름표를 여기에 연결
		} else {
		 temp_html = `<li>${gu_name} : ${gu_mise}</li>`
		}
		$('#names-q1').append(temp_html);
		}}})}
		</script>
--------------------------------------------------------------------------
<!doctype html>
<html lang="ko">

<head>
    <meta charset="UTF-8">
    <title>jQuery 연습하고 가기!</title>
// JQuery를 import 합니다
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
    <style type="text/css">
        div.question-box {
         margin: 10px 0 20px 0;
        }
		.bad{
		color : red;
		}
    </style>

    <script>
        function q1() {
		$('#names-q1').empty();
		$.ajax({
		type: "GET",
		url: "http://spartacodingclub.shop/sparta_api/seoulair",
		data: {},
		success: function (response) {
		let rows = response["RealtimeCityAir"]["row"];
		for (let i = 0; i < rows.length; i++) {
		let gu_name = rows[i]['MSRSTE_NM'];
		let gu_mise = rows[i]['IDEX_MVL'];
		let temp_html = `<li>${gu_name} : ${gu_mise}</li>`
		if(gu_mise > 120) {
		let temp_html = `<li class="bad">${gu_name} : ${gu_mise}</li>`
		} else {
		let temp_html = `<li>${gu_name} : ${gu_mise}</li>`
		}
		$('#names-q1').append(temp_html);
		}}})}
    </script>
    </head>
    <body>
        <h1>jQuery+Ajax의 조합을 연습하자!</h1>
        <hr/>
        <div class="question-box">
        <h2>1. 서울시 OpenAPI(실시간 미세먼지 상태)를 이용하기</h2>
        <p>모든 구의 미세먼지를 표기해주세요</p>
        <p>업데이트 버튼을 누를 때마다 지웠다 새로 씌여져야 합니다.</p>
        <button onclick="q1()">업데이트</button>
        <ul id="names-q1">
         <li>아예 < li > < / li >를 지우면 빈칸으로 시작하게 됨</li>
         <li>종로구 : 87</li>
         <li>용산구 : 84</li>
        </ul>
    </div>
    </body>
    </html>
--------------------------------------------------------------------------



따릉이


http://spartacodingclub.shop/sparta_api/seoulbike
서울시 OpenAPI(실시간 따릉이 현황)을 이용하기

일단 url가서 보면
    row: [
    parkingBikeTotCnt: 3,
    rackTotCnt: 22,
    shared: 19,
    stationName: "302. 경복궁역 4번출구 뒤"
    },
라고 뜬다.

리스트에 불러와야할 항목은
    거치대 위치 = stationName: 302. 경복궁역 4번출구 뒤
    거치대 수 = rackTotCnt: 22
    현재 거치된 따릉이 수 = parkingBikeTotCnt: 3
니께 타겟은 특정됐으니 row를 가져와보자고오


        function q1() {
		$('#names-q1').empty();
		$.ajax
        ({
		type: "GET",
		url: "http://spartacodingclub.shop/sparta_api/seoulbike",
        data: {},
        success: function(response
        ){
        console.log(response)
        }
        })
        }
        </script>
을 넣고 브라우져 -> 콘솔 -> 업데이트 버튼을 누르면
▶ {getStationList: {…}} 가 뜨고
   ▶ getStationList:
    ▶ row: Array(1116)
    row가 있는 위치는 getStationList인 것을 확인, getStationList를 가져온다.

        function q1() {
		$('#names-q1').empty();
		$.ajax
        ({
		type: "GET",
		url: "http://spartacodingclub.shop/sparta_api/seoulbike",
        data: {},
        success: function(response){
        console.log(response['getStationList']['row'])
        }
        })
        }
        </script>
로 콘솔을 실행하면
        (1116) [{…}, {…},
가 뜨는 거 확인!

이제 for문으로 돌려서
        거치대 위치 = stationName: 302. 경복궁역 4번출구 뒤
        거치대 수 = rackTotCnt: 22
        현재 거치된 따릉이 수 = parkingBikeTotCnt: 3
내용을 가져오자,
    for (let i =0; i< rows.length; i++){
                let name = rows[i]['stationName']
    이름은 name으로 rows의 i번째의 ' ' 을 가져오고
    이름을 rack으로 rows의 i번째의 ' '을 가져오고~ 이런 느낌의 문장임
콘솔로 한번 제대로 가져오는 지 테스트해보자

        function q1() {
		$('#names-q1').empty();
		$.ajax
        ({
		type: "GET",
		url: "http://spartacodingclub.shop/sparta_api/seoulbike",
        data: {},
        success: function(response){
            let rows =response['getStationList']['row']
            for (let i =0; i < rows.length; i++){
                let name = rows[i]['stationName']
                let rack = rows[i]['rackTotCnt']
                let bike = rows[i]['parkingBikeTotCnt']

                console.log(name, rack,bike)
            }
        }
        })
        }
        </script>
콘솔 실행해보면 아래처럼 제대로 뜬다.
성공이다.
        301. 경복궁역 7번출구 앞 20 13
        302. 경복궁역 4번출구 뒤 22 3 ...
이제 콘솔은 지우고 temp_html만들어서 AJAX랑 html을 붙여주자

        +

        let temp_html로 AJAX랑 HTML을 연결하는데
        = `<tr>
        <td>${name}</td>
        <td>${rack}</td>
        <td>${bike}</td>
        </tr>`
↗이 내용을
↓ <body>안에 있는 names-q1 클래스 이름이 붙은
            <table>
            <thead>
            <tr>
            <td>거치대 위치</td>
            <td>거치대 수</td>
            <td>현재 거치된 따릉이 수</td>
            </tr>
↗ 여기에 있는 내용대로
            </thead>

            <tbody id="names-q1">
↗이 부분에다가 !!!!!!!!!!!!
여기에 다가 불러다가 붙이겠다는 문장임
$('#names-q1').append(temp_html)
            </tbody>
            </table>
        +
업데이트 누를 때마다 덮어쓰도록
$('#names-q1').empty();
태그도 붙여줌

        function q1() {
		$('#names-q1').empty();
		$.ajax
        ({
		type: "GET",
		url: "http://spartacodingclub.shop/sparta_api/seoulbike",
        data: {},
        success: function(response){
            let rows =response['getStationList']['row']
            for (let i =0; i < rows.length; i++){
                let name = rows[i]['stationName']
                let rack = rows[i]['rackTotCnt']
                let bike = rows[i]['parkingBikeTotCnt']

                let temp_html = `<tr>
                                <td>${name}</td>
                                <td>${rack}</td>
                                <td>${bike}</td>
                                </tr>`
                $('#names-q1').append(temp_html)
            }        }        })
        }
    </script>

이제 일정 갯수보다 적으면 빨간 색으로 표기 되도록
CSS를 연결해주자.
AJAX 관련 태그는 모두 <SCRIPT>안에서만 한다.
이름을 설정하는 거 아니면 <body>로 내려 갈일은 없음.

우선은 <div class=''>같은 문법으로 <head>에 복붙한
            <script>
            ...
            let temp_html = ' <tr여기 안에다가 class =''을 만들어준다 > '
            ...
일단 이 상태에서 저장해서 빨간색으로 적용되는 지 보고
문제 없으면 script안에 temp_html에 연결할 css를 적어 넣어준다.






--------------------------------------------------------------------------

-->

<!doctype html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <title>JQuery 연습하고 가기!</title>

// JQuery를 import 합니다
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>

<style type="text/css">
        div.question-box {
            margin: 10px 0 20px 0;
        }
        table {
            border: 1px solid;
            border-collapse: collapse;
        }
        td,
        th {
            padding: 10px;
            border: 1px solid;
        }
        .urgent{
            color : red;
        }
</style>

<script>

        function q1() {
		$('#names-q1').empty();
		$.ajax
        ({
		type: "GET",
		url: "http://spartacodingclub.shop/sparta_api/seoulbike",
        data: {},
        success: function(response){
            let rows =response['getStationList']['row']
            for (let i =0; i < rows.length; i++){
                let name = rows[i]['stationName']
                let rack = rows[i]['rackTotCnt']
                let bike = rows[i]['parkingBikeTotCnt']

                let temp_html = ''
//                      ↑ temp_html을 만드는데.. 라는 문장임
                if (bike < 5) {
 //                      ↑ 자전거가 5대 미만이면- 이라고 조건을 붙인다.
                   temp_html = `<tr class="urgent">
                                <td>${name}</td>
                                <td>${rack}</td>
                                <td>${bike}</td>
                                </tr>`
                } else{
 //                              ↓ 여기서는 css가 적용 안되게 class명을 빼준다.
                  temp_html =  `<tr>
                                <td>${name}</td>
                                <td>${rack}</td>
                                <td>${bike}</td>
                                </tr>`
                }
                $('#names-q1').append(temp_html)
            }
        }
        })
        }
</script>

</head>

<body>
    <h1>jQuery + Ajax의 조합을 연습하자!</h1>
    <hr />
    <div class="question-box">
        <h2>2. 서울시 OpenAPI(실시간 따릉기 현황)를 이용하기</h2>
        <p>모든 위치의 따릉이 현황을 보여주세요</p>
        <p>업데이트 버튼을 누를 때마다 지웠다 새로 씌여져야 합니다.</p>
        <button onclick="q1()">업데이트</button>
        <table>
            <thead>
                <tr>
                    <td>거치대 위치</td>
                    <td>거치대 수</td>
                    <td>현재 거치된 따릉이 수</td>
                </tr>
            </thead>
            <tbody id="names-q1">
            </tbody>
        </table>
    </div>
</body>

</html>




<!--
                  .         .
 8 8888          ,8.       ,8.               ,o888888o.                       .8.          8 888888888o    8 8888
 8 8888         ,888.     ,888.             8888     `88.                    .888.         8 8888    `88.  8 8888
 8 8888        .`8888.   .`8888.         ,8 8888       `8.                  :88888.        8 8888     `88  8 8888
 8 8888       ,8.`8888. ,8.`8888.        88 8888                           . `88888.       8 8888     ,88  8 8888
 8 8888      ,8'8.`8888,8^8.`8888.       88 8888                          .8. `88888.      8 8888.   ,88'  8 8888
 8 8888     ,8' `8.`8888' `8.`8888.      88 8888                         .8`8. `88888.     8 888888888P'   8 8888
 8 8888    ,8'   `8.`88'   `8.`8888.     88 8888   8888888              .8' `8. `88888.    8 8888          8 8888
 8 8888   ,8'     `8.`'     `8.`8888.    `8 8888       .8'             .8'   `8. `88888.   8 8888          8 8888
 8 8888  ,8'       `8        `8.`8888.      8888     ,88'             .888888888. `88888.  8 8888          8 8888
 8 8888 ,8'         `         `8.`8888.      `8888888P'              .8'       `8. `88888. 8 8888          8 8888



랜덤 르탄이 API를 이용하기
이미지 바꾸기 / 텍스트 바꾸기

메시지와 url 바꿔치기하는 AJAX 쿼리이다.
- 이미지 바꾸기 : `$("#아이디값").attr("src", 이미지URL);`
- 텍스트 바꾸기 : `$("#아이디값").text("바꾸고 싶은 텍스트");`



1단계. AJAX 부르기
제대로 작동하는지  console.log(response) 까지 넣고 브라우저 콘솔 실행,
르탄이 나와 버튼을 클릭해봄
        <script>
          function q1() {
            $.ajax
            ({
              type: "GET",
              url: "http://spartacodingclub.shop/sparta_api/rtan",
              data: {},
              success: function (response) {

              console.log(response)
              }
            })
          }
        </script>

요딴게 잘 뜨는 거 확인 ↓
버튼을 누를 때마다 다른 메시지가 뜬다.
        {msg: '나는 DJ 르탄!', url: 'http://spartacodingclub.shop/static/images/rtans/SpartaIcon02.png'}
        {msg: '나는 엄마 르탄!', url: 'http://spartacodingclub.shop/static/images/rtans/SpartaIcon07.png'}
        {msg: '나는 어린이 르탄!', url: 'http://spartacodingclub.shop/static/images/rtans/SpartaIcon08.png'}


2단계.
바꿔서 가져올 url을 먼저 연결해주자.
가져와야할 항목들은
msg와 url인 것은 파악했으니까ㅡ,

          function q1() {
            $.ajax
            ({
              type: "GET",
              url: "http://spartacodingclub.shop/sparta_api/rtan",
              data: {},
              success: function (response) {

              let url = response['url']
              let msg = response['msg']

                console.log(msg,url)
              }
            })
          }
        </script>

콘솔에서
{msg: '나는 DJ 르탄!', url: ...로 뜨던 것이
나는 공부하는 르탄! http://spartacodingclub.shop/static/images/rtans/SpartaIcon01.png
나는 엄마 르탄! http://spartacodingclub.shop/static/images/rtans/SpartaIcon07.png
나는 영화 르탄! http://spartacodingclub.shop/static/images/rtans/SpartaIcon04.png
로 딱 표기항목만 나오는 것을 볼 수 있다.


3단계.
id값과 ajax 코드를 연결하는 작업 시작.
<div>에 있는
<img id="img-rtan" "...">
<h1 id="text-rtan">나는 ㅇㅇㅇ하는 르탄이!</h1>
의 id와 연결하는 작업.

- 이미지 바꾸기 : `$("#아이디값").attr("src", 이미지URL);`
- 텍스트 바꾸기 : `$("#아이디값").text("바꾸고 싶은 텍스트");
니까

          function q1() {
            $.ajax
            ({
              type: "GET",
              url: "http://spartacodingclub.shop/sparta_api/rtan",
              data: {},
              success: function (response) {

              let url = response['url']
              let msg = response['msg']

              $('#img-rtan').attr('src', url)
//                                 ↑  src는 url로 바꾸고
              $('#text-rtan').text(msg)
//                              ↑ text는 msg로 바꾸겠다. 라는 문장
              }
            })
          }
        </script>

-->



<!doctype html>
<html lang="ko">
  <head>
    <meta charset="UTF-8">
    <title>JQuery 연습하고 가기!</title>
    <!-- JQuery를 import 합니다 -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>

    <style type="text/css">
      div.question-box {
        margin: 10px 0 20px 0;
      }
      div.question-box > div {
        margin-top: 30px;
      }
    </style>

    <script>
      function q1() {
        $.ajax
        ({
          type: "GET",
          url: "http://spartacodingclub.shop/sparta_api/rtan",
          data: {},
          success: function (response) {
          let url = response['url']
          let msg = response['msg']

          $('#img-rtan').attr('src', url)
          $('#text-rtan').text(msg)
          }
        })
      }
    </script>

  </head>
  <body>
    <h1>JQuery+Ajax의 조합을 연습하자!</h1>

    <hr/>

    <div class="question-box">
      <h2>3. 르탄이 API를 이용하기!</h2>
      <p>아래를 르탄이 사진으로 바꿔주세요</p>
      <p>업데이트 버튼을 누를 때마다 지웠다 새로 씌여져야 합니다.</p>
      <button onclick="q1()">르탄이 나와</button>
      <div>
        <img id="img-rtan" width="300" src="http://spartacodingclub.shop/static/images/rtans/SpartaIcon11.png"/>
        <h1 id="text-rtan">나는 ㅇㅇㅇ하는 르탄이!</h1>
      </div>
    </div>
  </body>
</html>








<!--

                                             .         .
8 8888        8     ,o888888o.              ,8.       ,8.          8 8888888888   `8.`888b                 ,8'     ,o888888o.     8 888888888o.   8 8888     ,88'
8 8888        8  . 8888     `88.           ,888.     ,888.         8 8888          `8.`888b               ,8'   . 8888     `88.   8 8888    `88.  8 8888    ,88'
8 8888        8 ,8 8888       `8b         .`8888.   .`8888.        8 8888           `8.`888b             ,8'   ,8 8888       `8b  8 8888     `88  8 8888   ,88'
8 8888        8 88 8888        `8b       ,8.`8888. ,8.`8888.       8 8888            `8.`888b     .b    ,8'    88 8888        `8b 8 8888     ,88  8 8888  ,88'
8 8888        8 88 8888         88      ,8'8.`8888,8^8.`8888.      8 888888888888     `8.`888b    88b  ,8'     88 8888         88 8 8888.   ,88'  8 8888 ,88'
8 8888        8 88 8888         88     ,8' `8.`8888' `8.`8888.     8 8888              `8.`888b .`888b,8'      88 8888         88 8 888888888P'   8 8888 88'
8 8888888888888 88 8888        ,8P    ,8'   `8.`88'   `8.`8888.    8 8888               `8.`888b8.`8888'       88 8888        ,8P 8 8888`8b       8 888888<
8 8888        8 `8 8888       ,8P    ,8'     `8.`'     `8.`8888.   8 8888                `8.`888`8.`88'        `8 8888       ,8P  8 8888 `8b.     8 8888 `Y8.
8 8888        8  ` 8888     ,88'    ,8'       `8        `8.`8888.  8 8888                 `8.`8' `8,`'          ` 8888     ,88'   8 8888   `8b.   8 8888   `Y8.
8 8888        8     `8888888P'     ,8'         `         `8.`8888. 8 888888888888          `8.`   `8'              `8888888P'     8 8888     `88. 8 8888     `Y8.


숙제버전의 차이점은
버튼을 눌러서 새로 불러오는 것이 아니라
페이지를 로딩하면 바로 AJAX를 가져와서 띄우고 새로고침을 해야 덮어쓰기하는 방식임.



=날씨 APi 가져와서 띄우기=
        http://spartacodingclub.shop/sparta_api/weather/seoul

                {
                city: "Seou",
                clouds: "17%",
                icon: "http://openweathermap.org/img/w/02d.png",
                temp: 33.7
                }
         가져와야할 항목이 temp 임을 확인.

이전에는 리스트라 줄줄이 뭔가 ㅈㄴ 길게 불러왔는데
지금은 도시 하나만 특정해서 온도를 표기하는 방식이라
for (let i =0; i < rows.length; i++){
     let name = rows[i]['stationName']...
이딴거 없어도 됨


=로딩 후 호출하기=
(아직 버튼을 눌러서 부르는 게 아니라 알아서 부르는 방법을 안배웠으니께 얼럿부터해보자는)
굳이 얼럿 이걸 왜 하는 지 이해 아직 안됨
        $(document).ready(function(){
          alert('다 로딩됐다!')
        });


1.단계
id를 부여해서 AJAX를 불러다가 띄울 자리 만들기
- 텍스트 바꾸기 : `$('#아이디값').text(바꾸고 싶은 텍스트); 를 활용

        <p>현재 기온 : <span id="temp"> 00.00도</span></p>
        를 삽입

        <script></script>
        생성 ↓

 <script>
      $(document).ready(function (){
         $.ajax
        ({
          type: "GET",
          url: "http://spartacodingclub.shop/sparta_api/weather/seoul",
          data: {},
          success: function (response) {
          $('#temp').text(response['temp'])
//          이건 또 뭐야 ㅅㅂ ↑  console.log(response['RealtimeCityAir']['row'])랑 짬뽕이고 ㅈㄹ이야
          }
        })
      })
 </script>








 <<해설>>


        $(document).ready(function(){
            $.ajax({
                type: "GET",
                url:"http://spartacodingclub.shop/sparta_api/weather/seoul",
                data:{},
                success:function(response) {
                console.log(response)
                }

            })
        })


를 넣으면 콘솔에서
        Object city:"Seoul"
        clouds:"0%"
        icon:"http://openweathermap.org/img/w/01d.png"
        temp:-2.81
        [[Prototype]]:Object
로 잘 뜨는 것을 확인 가능
이 중에서 필요한 것은 temp:인 것을 확인 완료

        $(document).ready(function(){
            $.ajax({
                type: "GET",
                url:"http://spartacodingclub.shop/sparta_api/weather/seoul",
                data:{},
                success:function(response) {
                let temp = response ['temp']
                console.log(temp)
                }
            })
        })

console.log(response)  --->  console.log(temp)
로 변경하는 것에 주목.

-2.81 로 뜨는 것을 확인


다 temp 지랄이라서 헷갈릴 수 있으니 정리!
        $(document).ready(function(){
            $.ajax({
                type: "GET",
                url:"http://spartacodingclub.shop/sparta_api/weather/seoul",
                data:{},
                success:function(response) {
                let temp = response ['temp']
//                                      ↖ 서버에서 가져온 데이터 이름
//                              ↙ 이건 변수고
                $('#temp').text(temp)
//                  ↖ 이건 body 에 있는 id인 temp를 의미한다.
                }
            })
        })





-->

<!doctype html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM"
        crossorigin="anonymous"></script>

    <title>스파르타코딩클럽 | 부트스트랩 연습하기</title>
    <link href="https://fonts.googleapis.com/css2?family=Gowun+Dodum&display=swap" rel="stylesheet">
    <!-- JQuery를 import 합니다 -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>

 <script>
      $(document).ready(function (){
         $.ajax
        ({
          type: "GET",
          url: "http://spartacodingclub.shop/sparta_api/weather/seoul",
          data: {},
          success: function (response) {
          $('#temp').text(response['temp'])
          }
        })
      })
 </script>

  <style>
			    * {
		    font-family: 'Gowun Dodum', sans-serif;
		    }
			.send_box {
				display: flex;
				flex-direction: column;
				justify-content: center;
				align-items: center;
				}
			.my_title {
			    width: 100%;
			    height: 400px;
			    background-image:linear-gradient(0deg, rgba(3, 0, 0, 0), rgba(0, 0, 0, 0.4)),
						url("https://ddragon.leagueoflegends.com/cdn/img/champion/splash/Camille_0.jpg");
			    background-position: center 20%;
			    background-size: cover;
			    color: white;
			    display: flex;
			    flex-direction: column;
			    justify-content: center;
			    align-items: center;
			    }
			.wrap {
				margin-left: 85px;
				max-width: 800px;
			}
			.card {
				width: 80%;
				max-width: 800px;
				background-color: mintcream;
				margin: 15px;
			}
			.form-floating1{
				margin-top: 10px;
				width: 300px;
			}
			.form-floating2{
				margin-top: 10px;
				width: 600px;
			}
			.mybtn{
			margin-top: 10px;
			}
			.mybtn > button {
			  width: 200px;
			    height: 50px;
			    background-color: transparent;
			    border-radius: 50px;
			    border: 2px solid aquamarine;
			    margin-top: 10px;
		    }

  </style>
</head>

<body>
		    <div class="my_title">
			<h1>롤알못인데 Camille언니 팬페이지</h1>
		    <p>현재 기온 : <span id="temp">00.00도</span></p>

            </div>

		<div class="send_box">
  			<div class="mypost">
		    <form class="form-floating1">
				<label for="floatingInputValue">닉네임</label>
				<input type="text" class="form-control" id="floatingInputValue" placeholder="Name here"
			       value="">
		    </form>
		    <div class="form-floating2">
				<label for="floatingTextarea">코멘터리</label>
				<textarea class="form-control" placeholder="Leave a comment here" id="floatingTextarea"></textarea>
		    </div>
		     <div class="mybtn">
		    <button type="button" class="btn">send</button>
		    </div>
		</div>

		<DIV class="wrap" >
			<div class="card">
				<div class="card-header">
					<div class="card-body">
			<blockquote class="blockquote mb-0">
			  <p>필트오버 영주권 나도 줘요옷!</p>
			  <footer class="blockquote-footer">
				<cite title="Source Title">Kadura Jin</cite></footer>
			</blockquote>
					</div>
				</div>
			</div>
				<div class="card">
				<div class="card-header">
					<div class="card-body">
			<blockquote class="blockquote mb-0">
			  <p>적폐챔의 권좌</p>
			  <footer class="blockquote-footer">Nogada Jin</footer>
			</blockquote>
					</div>
				</div>
			</div>
				<div class="card">
				<div class="card-header">
					<div class="card-body">
			<blockquote class="blockquote mb-0">
			  <p>공공칠빵! 으악</p>
			  <footer class="blockquote-footer">
				<cite title="Source Title">Gara Jin</cite></footer>
			</blockquote>
					</div>
				</div>
			</div>
		</DIV>
</div>


</body>
</html>
